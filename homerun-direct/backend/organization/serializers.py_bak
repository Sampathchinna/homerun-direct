from core.serializers import GenericSerializer
from rest_framework import serializers
from .models import Organization
from master.models import Location
from rest_framework.response import Response
from django.core.exceptions import ValidationError

class OrganizationSerializer(GenericSerializer):

    # âœ… Flat output fields (mapped from location)

    street_address = serializers.CharField(write_only=True)
    apt_suite = serializers.CharField(write_only=True, required=False)
    city = serializers.CharField(write_only=True)
    state_province = serializers.CharField(write_only=True)
    postal_code = serializers.CharField(write_only=True)
    country = serializers.CharField(write_only=True)
    latitude = serializers.DecimalField(write_only=True, required=False, max_digits=12, decimal_places=9)
    longitude = serializers.DecimalField(write_only=True, required=False, max_digits=12, decimal_places=9)

    # Add output fields manually in to_representation

    def to_representation(self, instance):
        rep = super().to_representation(instance)
        if instance.location:
            rep.update({
                "street_address": instance.location.street_address,
                "apt_suite": instance.location.apt_suite,
                "city": instance.location.city,
                "state_province": instance.location.state_province,
                "postal_code": instance.location.postal_code,
                "country": instance.location.country,
                "latitude": instance.location.latitude,
                "longitude": instance.location.longitude,
            })
        return rep


    def create(self, validated_data):
        location_data = {field: validated_data.pop(field, None) for field in [
            "street_address", "apt_suite", "city", "state_province",
            "postal_code", "country", "latitude", "longitude"
        ]}

        location, _ = Location.objects.get_or_create(
            city=location_data["city"],
            state_province=location_data["state_province"],
            country=location_data["country"],
            postal_code=location_data["postal_code"],
            latitude=location_data["latitude"],
            longitude=location_data["longitude"],
            defaults=location_data
        )

        validated_data["location"] = location
        return super().create(validated_data)


    def update(self, instance, validated_data):
        # Extract location data from flat fields
        location_data = {field: validated_data.pop(field, None) for field in [
            "street_address", "apt_suite", "city", "state_province",
            "postal_code", "country", "latitude", "longitude"
        ]}

        # Update existing location if available
        if instance.location:
            for key, val in location_data.items():
                if val is not None:
                    setattr(instance.location, key, val)
            instance.location.save()
        else:
            # Create or reuse existing location
            location, _ = Location.objects.get_or_create(
                city=location_data["city"],
                state_province=location_data["state_province"],
                country=location_data["country"],
                postal_code=location_data["postal_code"],
                latitude=location_data["latitude"],
                longitude=location_data["longitude"],
                defaults=location_data
            )
            validated_data["location"] = location

        # Continue with updating the Organization
        return super().update(instance, validated_data)



    def validate(self, attrs):
        if not attrs.get("terms_agreement"):
            raise serializers.ValidationError({"terms_agreement": "You must agree to terms to proceed."})
        return attrs

    class Meta:
        model = Organization
        fields = '__all__'
        read_only_fields = ['is_organization_created']
        # extra_kwargs = {
        #     "location": {"required": False}  # Prevent DRF from treating it as a dropdown
        # }

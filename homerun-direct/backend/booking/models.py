from django.db import models
from core.models import BaseModel

class BookingNetDetails(BaseModel):
    booking_code = models.TextField()
    booking_total_cents = models.IntegerField(null=True, blank=True)
    collected_cents = models.IntegerField(null=True, blank=True)
    created_at = models.DateTimeField(null=True, blank=True)
    final_net_cents = models.IntegerField(null=True, blank=True)
    id = models.BigAutoField(primary_key=True)
    organization_id = models.IntegerField(null=True, blank=True)
    other_fees_cents = models.IntegerField(null=True, blank=True)
    payouts_cents = models.IntegerField(null=True, blank=True)
    quote_id = models.BigIntegerField(null=True, blank=True)
    system_fees_cents = models.IntegerField(null=True, blank=True)
    taxes_cents = models.IntegerField(null=True, blank=True)
    updated_at = models.DateTimeField(null=True, blank=True)

class Bookings(BaseModel):
    airbnb_cancellation_policy = models.TextField()
    alteration_accepted = models.BooleanField(null=True, blank=True)
    alteration_request = models.DateField(null=True, blank=True)
    archived = models.BooleanField(null=True, blank=True)
    awaiting_verification = models.BooleanField(null=True, blank=True)
    balance_collection_date = models.DateField(null=True, blank=True)
    bdc_cancel_code = models.IntegerField(null=True, blank=True)
    booking_code = models.TextField()
    booking_range = models.TextField()
    booking_type = models.IntegerField(null=True, blank=True)
    cancellation_date = models.DateField(null=True, blank=True)
    cancellation_notes = models.TextField()
    cancellation_reason = models.TextField()
    cancelled = models.BooleanField(null=True, blank=True)
    channel_id = models.IntegerField(null=True, blank=True)
    channel_updatable = models.BooleanField(null=True, blank=True)
    charges_pending = models.BooleanField(null=True, blank=True)
    check_in = models.DateField(null=True, blank=True)
    check_in_time = models.DateTimeField(null=True, blank=True)
    check_out = models.DateField(null=True, blank=True)
    check_out_time = models.DateTimeField(null=True, blank=True)
    confirmed = models.BooleanField(null=True, blank=True)
    connected_stripe_customer_id = models.TextField()
    coupon_code = models.TextField()
    created_at = models.DateTimeField(null=True, blank=True)
    creation_method = models.IntegerField(null=True, blank=True)
    customer_id = models.BigIntegerField(null=True, blank=True)
    delivery_location_id = models.BigIntegerField(null=True, blank=True)
    direct_fee = models.IntegerField(null=True, blank=True)
    door_code = models.TextField()
    external_contract_code = models.TextField()
    external_id = models.TextField()
    external_insurance_verified = models.BooleanField(null=True, blank=True)
    generated_as_type = models.IntegerField(null=True, blank=True)
    generator_usage_included = models.IntegerField(null=True, blank=True)
    homeaway_cancellation_reservation_status = models.IntegerField(null=True, blank=True)
    id = models.BigAutoField(primary_key=True)
    invalid_card_enqued = models.DateField(null=True, blank=True)
    mileage_included = models.IntegerField(null=True, blank=True)
    notes = models.TextField()
    num_guests = models.IntegerField(null=True, blank=True)
    org_total = models.IntegerField(null=True, blank=True)
    organization_id = models.IntegerField(null=True, blank=True)
    owner_self_clean = models.BooleanField(null=True, blank=True)
    owner_total = models.IntegerField(null=True, blank=True)
    paid_status_override_flag = models.IntegerField(null=True, blank=True)
    payment_customer_id = models.TextField()
    price_breakdown = models.TextField()
    price_paid = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    price_total = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    processing_fee = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    quote_id = models.BigIntegerField(null=True, blank=True)
    rvshare_booking_cancellation_policy = models.IntegerField(null=True, blank=True)
    rvshare_calendar_block_id = models.TextField()
    source = models.TextField()
    split_booking_id = models.BigIntegerField(null=True, blank=True)
    stripe_customer_id = models.TextField()
    stripe_fee = models.IntegerField(null=True, blank=True)
    stripe_transfers = models.TextField()
    subtotal = models.IntegerField(null=True, blank=True)
    type = models.TextField()
    unit_listing_id = models.BigIntegerField(null=True, blank=True)
    unlimited_generator = models.BooleanField(null=True, blank=True)
    updated_at = models.DateTimeField(null=True, blank=True)

    # def build_json(self):
    #     return {
    #         "id": self.id,
    #         "check_in": self.check_in,
    #         "check_out": self.check_out,
    #         "cancelled": self.cancelled,
    #         "archived": self.archived
    #     }

class BookingsFees(BaseModel):
    all_id = models.BigIntegerField(null=True, blank=True)
    booking_id = models.BigIntegerField(null=True, blank=True)
    fee_id = models.BigIntegerField(null=True, blank=True)
    id = models.BigAutoField(primary_key=True)
    organization_id = models.IntegerField(null=True, blank=True)


class LineItems(BaseModel):
    additional_data = models.TextField()
    cancellation = models.BooleanField(null=True, blank=True)
    created_at = models.DateTimeField(null=True, blank=True)
    credit_account_id = models.BigIntegerField(null=True, blank=True)
    debit_account_id = models.BigIntegerField(null=True, blank=True)
    id = models.BigAutoField(primary_key=True)
    item_type = models.TextField()
    itemizable_id = models.BigIntegerField(null=True, blank=True)
    itemizable_type = models.TextField()
    name = models.TextField()
    occurrence_date = models.TextField()
    optional = models.BooleanField(null=True, blank=True)
    organization_id = models.IntegerField(null=True, blank=True)
    owner_split_id = models.BigIntegerField(null=True, blank=True)
    rate = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    refundable = models.BooleanField(null=True, blank=True)
    split = models.TextField()
    taxable = models.BooleanField(null=True, blank=True)
    total_cents = models.IntegerField(null=True, blank=True)
    updated_at = models.DateTimeField(null=True, blank=True)
